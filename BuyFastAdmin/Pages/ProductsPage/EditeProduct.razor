@page "/editeproduct/{id:guid}"
@using System.Net
@using System.Net.Http.Headers
@using BuyFastDTO
@using BuyFastDTO.RequestModels
@using System.Globalization
@inject CustomAuthenticationStateProvider _authenticationStateProvider

<h3>Edit Product</h3>

@if (product == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 border">
            <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="productName" class="form-label">Названия</label>
                    <InputText id="productName" @bind-Value="product.Name" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="productDescription" class="form-label">Описание</label>
                    <InputTextArea id="productDescription" @bind-Value="product.Description" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="productPrice" class="form-label">Цена</label>
                    <InputText id="productPrice" class="form-control"
                               @bind-Value="formattedPrice"
                               @bind-Value:event="oninput" />
                </div>

                <div class="mb-3">
                    <label for="productCategory" class="form-label">Категория</label>
                    <InputSelect id="productCategory" @bind-Value="product.CategoryId" class="form-select">
                        <option value="">-- Выберите категорию --</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public Guid id { get; set; }
    private ProductResponse? product;
    private List<CategoryRequest>? Categories = new();
    private IBrowserFile? selectedFile;
    private string? errorMessage;
    private const long maxFileSize = 10242880;

    protected override async Task OnInitializedAsync()
    {
        var token = await _authenticationStateProvider.GetToken();

        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        product = await _httpClient.GetFromJsonAsync<ProductResponse>($"api/Products/Id?id={id}");
        Categories = await _httpClient.GetFromJsonAsync<List<CategoryRequest>>("api/categories");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var token = await _authenticationStateProvider.GetToken();

            if (!string.IsNullOrEmpty(token))
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                var response = await _httpClient.PutAsJsonAsync($"api/Products", product);

                if (response.IsSuccessStatusCode)
                {
                    _navigationManager.NavigateTo("/homeproduct");
                }
                else
                {
                    errorMessage = "Error updating product.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
    }
    private string formattedPrice
    {
        get => product?.Price.ToString("0.00", CultureInfo.InvariantCulture) ?? string.Empty;
        set
        {
            if (decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out var result) && product != null)
            {
                product.Price = result;
            }
        }
    }
}
