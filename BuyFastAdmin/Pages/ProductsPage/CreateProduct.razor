@page "/createProduct"
@using System.Net.Http.Headers
@using BuyFastDTO
@using BuyFastDTO.RequestModels
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Create Product</h3>
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 border">
        <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="productName" class="form-label">Name</label>
                <InputText id="productName" @bind-Value="product.Name" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="productDescription" class="form-label">Description</label>
                <InputTextArea id="productDescription" @bind-Value="product.Description" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="productPrice" class="form-label">Price</label>
                <InputNumber id="productPrice" @bind-Value="product.Price" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="productCategory" class="form-label">Category</label>
                <InputSelect id="productCategory" @bind-Value="product.CategoryId" class="form-select">
                    <option value="">-- Select Category --</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="productImage" class="form-label">Product Image</label>
                <InputFile id="productImage" OnChange="HandleImageUpload" class="form-control" />
            </div>

            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <div class="mb-3">
                    <img src="@product.ImageUrl" alt="Product Image" class="img-thumbnail" style="max-width: 200px;" />
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

@code {
    private CreateProductDto product = new();
    private List<CategoryDto>? Categories = new();
    private string? errorMessage;
    private IBrowserFile? selectedFile;
    private const long maxFileSize = 10242880; // 10 MB

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await _authenticationStateProvider.GetToken();

            if (!string.IsNullOrEmpty(token))
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
            Categories = await _httpClient.GetFromJsonAsync<List<CategoryDto>>("api/categories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private void HandleImageUpload(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null;

        if (selectedFile != null)
        {
            try
            {
                var content = new MultipartFormDataContent();

                content.Add(new StringContent(product.Name), nameof(product.Name));
                content.Add(new StringContent(product.Description), nameof(product.Description));
                content.Add(new StringContent(product.Price.ToString()), nameof(product.Price));
                content.Add(new StringContent(product.CategoryId.ToString()), nameof(product.CategoryId));
                
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxFileSize));
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, nameof(product.ImageUrl), selectedFile.Name);

                try
                {   var token = await _authenticationStateProvider.GetToken();

                    if (!string.IsNullOrEmpty(token))
                    {
                        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                        var response = await _httpClient.PostAsJsonAsync("api/Products", product);
                        if (response.IsSuccessStatusCode)
                        {
                            Navigation.NavigateTo("/products");
                        }
                        else
                        {
                            errorMessage = "Product creation failed.";
                        }
                    }
                }
                catch (Exception ex)
                {
                    errorMessage = $"Product creation error: {ex.Message}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Image upload error: {ex.Message}";
            }
        }
    }
}
