@page "/homeproduct"
@using BuyFastDTO
@using System.Net.Http.Headers
<button class="btn btn-primary" @onclick="CreateNew">Создать продукт</button>

@if (productlist != null && productlist.Any())
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var p in productlist)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <img src="@p.ImageUrl" class="card-img-top" alt="@p.Name" style="height: 300px; object-fit: cover;" />
                    <div class="card-body">
                        <h5 class="card-title">@p.Name</h5>
                        <p class="card-text text-muted">$@Math.Round(p.Price,2)</p>
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-sm btn-warning" @onclick="() => Edit(p.Id)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => Delete(p.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>Продукт ёфт нашуд</p>
}


@code {
    [Inject]
    private CustomAuthenticationStateProvider? authenticationStateProvider { get; set; }

    private string? authToken;
    private List<ProductResponse>? productlist = new();

    protected override async Task OnInitializedAsync()
    {
        authToken = await authenticationStateProvider.GetToken();
        if (authToken != null)
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
            productlist = await _httpClient.GetFromJsonAsync<List<ProductResponse>>("api/Products");
        }
    }

    void CreateNew() => _navigationManager.NavigateTo("/createProduct");
    void Edit(Guid id) => _navigationManager.NavigateTo($"/editeproduct/{id}");
    async Task Delete(Guid id)
    {
        if (authToken != null)
        {
            var response = await _httpClient.DeleteAsync($"api/Products?id={id}");
            if (response.IsSuccessStatusCode)
            {
                productlist = await _httpClient.GetFromJsonAsync<List<ProductResponse>>("api/products");
            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Data doesn't deleted!!!");
            }
        }
    }
}