@page "/homeproduct"
@using BuyFastDTO
@using System.Net.Http.Headers
<button class="btn btn-primary" @onclick="CreateNew">Create Category</button>
@if (categoriesList != null)
{
    <table class="table table-striped">
        <thead>
        <tr><th>Name</th><th>Price</th><th>Actions</th></tr>
        </thead>
        <tbody>
        @foreach (var p in categoriesList)
        {
            <tr>
                <td>@p.Name</td>
                <td>
                    <button class="btn btn-sm btn-warning" @onclick="() => Edit(p.Id)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => Delete(p.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Продукт ёфт нашуд</p>
}

@code {
    [Inject]
    private CustomAuthenticationStateProvider? authenticationStateProvider { get; set; }

    private string? authToken;
    private List<CategoryDto>? categoriesList = new();

    protected override async Task OnInitializedAsync()
    {
        authToken = await authenticationStateProvider.GetToken();
        if (authToken != null)
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
            categoriesList = await _httpClient.GetFromJsonAsync<List<CategoryDto>>("api/Products");
        }
    }

     void CreateNew() => _navigationManager.NavigateTo("/createProduct");
    void Edit(Guid id) => _navigationManager.NavigateTo($"/editeproduct/{id}");
    async Task Delete(Guid id)
    {
    //     await WebRequestMethods.Http.DeleteAsync($"api/products/{id}");
    //     categoriesList = await WebRequestMethods.Http.GetFromJsonAsync<List<ProductDto>>("api/products");
     }
}